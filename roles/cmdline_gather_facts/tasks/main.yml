---

- name: Lookup command-line arguments
  ansible.builtin.set_fact:
    cli_args: "{{ lookup('gmarcy.ansible.cli_args') }}"

- name: Set cli_remote_user fact from command-line args
  ansible.builtin.set_fact:
    cli_remote_user: "{{ cli_args.remote_user if (cli_args.remote_user is string) else '' }}"

- name: "Create map of all hosts declared using *host(s)_spec hostvars"
  ansible.builtin.set_fact:
    hosts_specs_map: "{{ hosts_specs_map | default({}) | combine(item_value) }}"
  loop: "{{ hosts_specs_keys }}"
  vars:
    hosts_specs_keys: "{{ hostvars[inventory_hostname].keys() | select('match', '(hosts?_spec|.*_hosts?_spec)') | flatten }}"
    item_value: "{{ hostvars[inventory_hostname][item] }}"

- when: (hosts_specs_map | default({})).keys() | length > 0
  name: Parse hosts_specs_map when present
  ansible.builtin.include_tasks: parse_hosts_spec.yml

- name: "Create map of all groups declared using *group(s)_spec extra vars"
  ansible.builtin.set_fact:
    groups_specs_map: "{{ groups_specs_map | default({}) | combine(item_value) }}"
  loop: "{{ groups_specs_keys }}"
  vars:
    groups_specs_keys: "{{ hostvars[inventory_hostname].keys() | select('match', '(groups?_spec|.*_groups?_spec)') | flatten }}"
    item_value: "{{ hostvars[inventory_hostname][item] }}"

- when: (groups_specs_map | default({})).keys() | length > 0
  name: Parse groups_specs_map when present
  ansible.builtin.include_tasks: parse_groups_spec.yml
