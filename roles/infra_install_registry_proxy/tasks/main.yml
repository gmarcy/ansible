---

- name: Set facts used in this next section
  ansible.builtin.set_fact:
    container_name: "{{ hostvars['cluster-facts'].options.cluster_name + '-registry-proxy' }}"
    registry_proxy_certs: "{{ user_home + '/.kube/registry-proxy/certs' }}"

- name: Check for systemd user service config
  ansible.builtin.stat:
    path: "{{ user_home + '/.config/systemd/user/container-' + container_name + '.service' }}"
  register: _result

- name: Set fact that registry proxy service config exists
  ansible.builtin.set_fact:
    registry_proxy_service_defined: "{{ _result.stat.exists }}"

- when: not registry_proxy_service_defined
  name: Create and run the registry-proxy container
  block:

    - name: Set facts used in this section
      ansible.builtin.set_fact:
        registry_proxy_mirror_cache: "{{ user_home + '/.kube/registry-proxy/mirror_cache' }}"

    - name: Make sure directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0700'
      loop:
      - "{{ registry_proxy_mirror_cache }}"
      - "{{ registry_proxy_certs }}"

    - name: Install buildah if required
      ansible.builtin.package:
        name:
        - buildah
        - podman
        - skopeo
        state: present

    - name: Remove any old buildah container
      ansible.builtin.shell: |
        set -eo pipefail
        if [ "$(buildah ls --filter {{ 'name=buildah-' + container_name }} --format {% raw %}'{{ .ContainerName }}'{% endraw %})" != "" ]
        then
          buildah rm {{ 'buildah-' + container_name }}
        fi
      args:
        executable: /bin/bash
      register: _result
      changed_when: _result is not defined

    - name: Create a new container image for the registry proxy
      ansible.builtin.command: |
        buildah from --name {{ 'buildah-' + container_name }} ghcr.io/gmarcy/container-registry-proxy:latest
      register: _result
      changed_when: _result is not defined

    - name: Update packages
      ansible.builtin.command: |
        buildah run {{ 'buildah-' + container_name }} -- apk upgrade
      register: _result
      changed_when: _result is not defined

    - name: Commit the container image
      ansible.builtin.command: |
        buildah commit {{ 'buildah-' + container_name }} {{ 'localhost/' + container_name + ':latest' }}
      register: _result
      changed_when: _result is not defined

    - name: Remove the buildah image
      ansible.builtin.command: |
        buildah rm {{ 'buildah-' + container_name }}
      register: _result
      changed_when: _result is not defined

    - name: Set _proxy_registry and _proxy_auth_registries facts
      ansible.builtin.set_fact:
        _proxy_registries:
        - 'ghcr.io'
        - 'quay.io'
        _proxy_auth_registries:
        - "{{ 'quay.io:' + quay_io_user + ':' + quay_io_token }}"
      vars:
        secrets: "{{ hostvars['playbook-secrets'].secrets }}"
        quay_io_user_secret: "{{ secrets.quay_io_user }}"
        quay_io_token_secret: "{{ secrets.quay_io_token }}"
        quay_io_user: "{{ lookup(quay_io_user_secret.module, quay_io_user_secret.param) | trim }}"
        quay_io_token: "{{ lookup(quay_io_token_secret.module, quay_io_token_secret.param) | trim }}"

    - name: Add artifactory registry if provided
      ansible.builtin.set_fact:
        _proxy_registries: "{{ _proxy_registries + [artifactory_fqdn] }}"
        _proxy_auth_registries: "{{ _proxy_auth_registries + [artifactory_fqdn + ':' + artifactory_user + ':' + artifactory_token] }}"
      vars:
        secrets: "{{ hostvars['playbook-secrets'].secrets }}"
        artifactory_fqdn_secret: "{{ secrets.artifactory_fqdn }}"
        artifactory_user_secret: "{{ secrets.artifactory_user }}"
        artifactory_token_secret: "{{ secrets.artifactory_token }}"
        artifactory_fqdn: "{{ lookup(artifactory_fqdn_secret.module, artifactory_fqdn_secret.param) | trim }}"
        artifactory_user: "{{ lookup(artifactory_user_secret.module, artifactory_user_secret.param) | trim }}"
        artifactory_token: "{{ lookup(artifactory_token_secret.module, artifactory_token_secret.param) | trim }}"
      when: secrets.artifactory_token is defined

    - name: Run the container with podman
      containers.podman.podman_container:
        name: "{{ container_name }}"
        image: "{{ 'localhost/' + container_name + ':latest' }}"
        init: true
        state: stopped
        ports:
        - "3128:3128"
        - "8081:8081"
        - "8082:8082"
        volumes:
        - "{{ registry_proxy_mirror_cache + ':/registry_proxy_mirror_cache' }}"
        - "{{ registry_proxy_certs + ':/ca' }}"
        env:
          DEBUG: 'true'
          DEBUG_HUB: 'true'
          ENABLE_MANIFEST_CACHE: 'true'
          REGISTRIES: "{{ _proxy_registries | join(' ') }}"
          AUTH_REGISTRIES: "{{ _proxy_auth_registries | join(' ') }}"
      register: _result_container_info
      retries: 5
      delay: 10
      until: not _result_container_info.failed

    - name: Create a systemd unit for the container
      containers.podman.podman_generate_systemd:
        name: "{{ container_name }}"
        dest: "{{ user_home + '/.config/systemd/user/' }}"

    - name: Start the systemd unit
      ansible.builtin.systemd:
        name: "{{ 'container-' + container_name }}"
        daemon_reload: true
        state: started
        enabled: true
        scope: user

- name: Wait until ca.crt has been created
  ansible.builtin.stat:
    path: "{{ registry_proxy_certs + '/ca.crt' }}"
  register: _result
  until: _result.stat.exists

- name: Fetch the contents of the ca.crt
  ansible.builtin.command: |
    cat {{ registry_proxy_certs + '/ca.crt' }}
  register: _result
  changed_when: false

- name: Set a fact for the ca.cert
  ansible.builtin.set_fact:
    ca_cert_contents: "{{ _result.stdout | trim }}"
    using_registry_proxy: true
  delegate_to: 'cluster-facts'
  delegate_facts: true
