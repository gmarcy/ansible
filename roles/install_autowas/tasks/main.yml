---

- when: inventory_hostname == (groups['all_nodes'] | first)
  name: Tasks which are only performed on the first VM
  block:

    - name: Collect all of the ssh_host_keys for all nodes
      ansible.builtin.set_fact:
        _all_host_keys: "{{ _all_host_keys | default([]) | union(ssh_known_hostnames | product([hostvars[item].ssh_host_key_public])) }}"
      loop: "{{ groups['all_nodes'] }}"
      vars:
        ssh_known_hostnames:
        - "{{ item }}"
        - "{{ hostvars[item].fqdn }}"
        - "{{ hostvars[item].publicip }}"
        - "{{ hostvars[item].privateip }}"
      delegate_to: 'cluster-facts'
      delegate_facts: true

- name: Add all nodes to each node known_hosts file
  ansible.builtin.known_hosts:
    name: "{{ item[0] }}"
    key: "{{ item[0] + ' ' + item[1] }}"
    state: present
  loop: "{{ hostvars['cluster-facts']._all_host_keys }}"

- when: inventory_hostname == (groups['all_nodes'] | first)
  name: Tasks which are only performed on the first VM
  block:

    - name: Clear temporary facts
      ansible.builtin.set_fact:
        _all_host_keys: []
      delegate_to: 'cluster-facts'
      delegate_facts: true

    - name: Disable firewalld
      ansible.builtin.systemd_service:
        name: firewalld
        enabled: false
        state: stopped
      register: _result
      no_log: true

    - name: Print result from systemd
      ansible.builtin.debug:
        msg: "{{ _result | combine({'status':status}) }}"
      vars:
        status:
          Result: "{{ _result.status.Result }}"

    - name: Install required packages
      ansible.builtin.package:
        name:
          - expect
          - python3-pip
        state: present
      register: _result

    - name: Install latest python modules with pip
      ansible.builtin.pip:
        name:
          - pip
          - wheel
          - paramiko
          - future
          - six
        state: latest
        extra_args: --user
      register: _result

    - name: Check if /opt/autowas folder exists
      ansible.builtin.stat:
        path: '/opt/autowas'
      register: _result_stat

    - when: not _result_stat.stat.exists
      name: Download autowas
      block:

        - name: Create the autowas folder
          ansible.builtin.file:
            path: '/opt/autowas'
            state: directory
            mode: '0755'
          register: _result

        - name: Download the archive and extract into /opt/autowas folder
          ansible.builtin.unarchive:
            src: 'http://rtpgsa.ibm.com/gsa/rtpgsa/projects/m/moonstone/drivers/releases/latest.tar.gz'
            dest: '/opt/autowas/'
            remote_src: true
            validate_certs: false
          register: _result

    - name: List contents of versionInfo folder
      ansible.builtin.find:
        paths: '/opt/autowas/versionInfo'
      register: _result
      no_log: true

    - name: Print out the file names
      ansible.builtin.debug:
        msg: "{{ _result.files | map(attribute='path') | map('basename') }}"

    - name: Run the configure script
      ansible.builtin.command:
        cmd: './bin/configure'
        chdir: '/opt/autowas'
      register: _result
      changed_when: false

    - name: Check if we already have a config.user file
      ansible.builtin.stat:
        path: "{{ user_home + '/autowas/etc/config.user' }}"
      register: _result_stat

    - when: not _result_stat.stat.exists
      name: Create config.user file
      block:

        - name: Create folder in home directory for config.user
          ansible.builtin.file:
            path: "{{ user_home + '/autowas/etc/' }}"
            state: directory
            mode: '0700'

        - name: Copy template for config.user
          ansible.builtin.copy:
            src: '/opt/autowas/etc/DO_NOT_EDIT_config.user'
            dest: "{{ user_home + '/autowas/etc/config.user' }}"
            remote_src: true
            mode: '0600'

    - name: Remove existing placeholders
      ansible.builtin.lineinfile:
        path: "{{ user_home + '/autowas/etc/config.user' }}"
        regexp: '^(user|pass)=FILL_IN_.*'
        state: absent

    - name: Replace placeholders with GSA credentials
      ansible.builtin.blockinfile:
        path: "{{ user_home + '/autowas/etc/config.user' }}"
        insertafter: '.* If your GSA password contains the following characters .*'
        block: |
          user={{ gsa_username }}
          pass={{ gsa_password }}
      vars:
        secrets: "{{ hostvars['playbook-secrets'].secrets }}"
        gsa_username_secret: "{{ secrets.gsa_username }}"
        gsa_password_secret: "{{ secrets.gsa_password }}"
        gsa_username: "{{ lookup(gsa_username_secret.module, gsa_username_secret.param) | trim }}"
        gsa_password: "{{ lookup(gsa_password_secret.module, gsa_password_secret.param) | trim }}"
      register: _result
      no_log: true

    - name: Print result of previous task
      ansible.builtin.debug:
        msg: "{{ _result }}"

- when: false
  name: Skipping these until there is an issue that needs them
  block:

    - name: Replace ntp server
      ansible.builtin.lineinfile:
        path: '/etc/chrony.conf'
        regexp: '^pool 2.rhel.pool.ntp.org iburst'
        line: 'server rtpgsa.ibm.com iburst'
        backup: true

    - name: Restart chronyd service
      ansible.builtin.systemd_service:
        name: chronyd
        state: restarted
      register: _result
      no_log: true

    - name: Print result from systemd
      ansible.builtin.debug:
        msg: "{{ _result | combine({'status':status}) }}"
      vars:
        status:
          Result: "{{ _result.status.Result }}"

- name: Install required packages
  ansible.builtin.package:
    name:
      - chkconfig
      - libnsl
      - xorg-x11-fonts-Type1
    state: present
  register: _result

- name: Install 32-bit packages for 8.5.5.x
  ansible.builtin.package:
    name:
      - glibc.i686
      - gtk2.i686
      - libnsl.i686
      - libxcrypt-compat.i686
      - libXtst.i686
      - libXft.i686
      - libXtst.i686
    state: present
  register: _result

- when: inventory_hostname == (groups['all_nodes'] | first)
  name: Tasks which are only performed on the first VM
  block:

    - name: Create /opt/scripts folder
      ansible.builtin.file:
        path: '/opt/scripts/'
        state: directory
        mode: '0755'

    - name: Download the default_v9_latest_2node.cfg.j2 template source
      ansible.builtin.get_url:
        url: 'http://rtpgsa.ibm.com/gsa/rtpgsa/home/g/m/gmarcy/web/shared/autowas/default_v9_latest_2node.cfg.j2'
        dest: './default_v9_latest_2node.cfg.j2'
        force_basic_auth: true
        url_username: "{{ gsa_username }}"
        url_password: "{{ gsa_password }}"
        validate_certs: false
        mode: '0644'
      vars:
        secrets: "{{ hostvars['playbook-secrets'].secrets }}"
        gsa_username_secret: "{{ secrets.gsa_username }}"
        gsa_password_secret: "{{ secrets.gsa_password }}"
        gsa_username: "{{ lookup(gsa_username_secret.module, gsa_username_secret.param) | trim }}"
        gsa_password: "{{ lookup(gsa_password_secret.module, gsa_password_secret.param) | trim }}"
      register: _result
      changed_when: false
      delegate_to: 'playbook-facts'
      delegate_facts: true

    - name: Create default_v9_latest_2node.cfg from template
      ansible.builtin.template:
        src: './default_v9_latest_2node.cfg.j2'
        dest: '/opt/scripts/default_v9_latest_2node.cfg'
        mode: '0644'

    - name: Remove the default_v9_latest_2node.cfg.j2 template
      ansible.builtin.file:
        path: './default_v9_latest_2node.cfg.j2'
        state: absent
      delegate_to: 'playbook-facts'
      delegate_facts: true

    - name: Install tWAS server
      ansible.builtin.shell:
        chdir: /opt/scripts
        cmd: source /opt/autowas/bin/AutoWASEnv.sh && cfg -cfg default_v9_latest_2node.cfg install && touch /opt/scripts/.install_completed
        creates: /opt/scripts/.install_completed
        executable: /bin/bash
      register: _result
      changed_when: _result.start != None

    - name: Create tWAS server topology
      ansible.builtin.shell:
        chdir: /opt/scripts
        cmd: source /opt/autowas/bin/AutoWASEnv.sh && cfg -cfg default_v9_latest_2node.cfg createTopology && touch /opt/scripts/.createTopology_completed
        creates: /opt/scripts/.createTopology_completed
        executable: /bin/bash
      register: _result
      changed_when: _result.start != None
