---

- name: Unregister our cluster with the assisted-install service
  ansible.builtin.set_fact:
    cluster_name: "{{ hostvars['cluster-facts'].options.cluster_name }}"

- name: Get a list of the cluster objects
  ansible.builtin.uri:
    url: "{{ assisted_install_rest_url }}/clusters"
  register: _result

- name: See if our cluster already exists
  ansible.builtin.set_fact:
    cluster_id: "{{ item.id }}"
  loop: "{{ _result.json }}"
  when: item.name == cluster_name

- name: Get a list of the infra-env objects
  ansible.builtin.uri:
    url: "{{ assisted_install_rest_url }}/infra-envs"
  register: _result

- name: See if our infra-env already exists
  ansible.builtin.set_fact:
    infra_env_id: "{{ item.id }}"
  loop: "{{ _result.json }}"
  when: item.name == (cluster_name + '_infra-env')

- name: Delete old cluster object
  ansible.builtin.uri:
    url: "{{ assisted_install_rest_url }}/clusters/{{ cluster_id }}"
    method: DELETE
    status_code: 204
  when: cluster_id | default('') | length > 0

- name: Delete old infra-env object
  ansible.builtin.uri:
    url: "{{ assisted_install_rest_url }}/infra-envs/{{ infra_env_id }}"
    method: DELETE
    status_code: 204
  when: infra_env_id | default('') | length > 0

# - name: Cleanup any deployment artifacts
#   ansible.builtin.file:
#     path: "{{ cluster_dir }}"
#     state: absent
#   vars:
#     cluster_dir: "{{ hostvars['cluster-facts']['cluster_dir'] }}"

- name: Collect ipxe macaddrs from all cluster hosts
  ansible.builtin.set_fact:
    cluster_ipxe_macaddrs: "{{ (cluster_ipxe_macaddrs | default([])) + [item] }}"
  loop: "{{ hostvars['cluster-facts']['cluster_host_names'] | map('extract', hostvars, 'ipxe_mac_address') }}"

- name: Remove the ipxe folders for the cluster mac addresses
  ansible.builtin.file:
    path: "{{ services_dir + '/ipxe/' + item }}"
    state: absent
  loop: "{{ cluster_ipxe_macaddrs }}"

- name: Power down the cluster hosts
  ansible.builtin.include_role:
    name: power_off_cluster_hosts
  vars:
    cluster_host_names: "{{ hostvars['cluster-facts'].cluster_host_names }}"
    secrets: "{{ hostvars['playbook-secrets'].secrets }}"
    ipmitool_username_secret: "{{ secrets.ipmitool_username }}"
    ipmitool_password_secret: "{{ secrets.ipmitool_password }}"
    ipmitool_username: "{{ lookup(ipmitool_username_secret.module, ipmitool_username_secret.param) }}"
    ipmitool_password: "{{ lookup(ipmitool_password_secret.module, ipmitool_password_secret.param) }}"
