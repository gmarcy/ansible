---

- name: Set facts used in this role
  set_fact:
    cluster_dir: "{{ hostvars['cluster-facts'].cluster_dir }}"
    cluster_domain: "{{ hostvars['cluster-facts'].options.cluster_domain }}"
    cluster_name: "{{ hostvars['cluster-facts'].options.cluster_name }}"
    cluster_provisioner: "{{ hostvars['cluster-facts'].options.cluster_provisioner }}"

- when: inventory_hostname in (groups['bastion_node'] | default([])) and (deploy_infra_services | default(false))
  name: Setup services running in infra node
  ansible.builtin.include_role:
    name: infra_services_deploy

- when: inventory_hostname in groups['cluster_nodes']
  name: Check to see if we have already provisioned all the nodes
  block:

    - name: Check to see if we have provisioned this node
      stat:
        path: .ansible/k3s_node_provisioned
      register: _result

    - when: inventory_hostname == groups['cluster_nodes'] | first
      name: Set fact if node provisioning completed
      set_fact:
        nodes_provisioned: "{{ groups['cluster_nodes'] | map('extract', hostvars, '_result') | map(attribute='stat.exists') | unique | difference([true]) | length == 0 }}"
      delegate_to: 'cluster-facts'
      delegate_facts: true

- when: not hostvars['cluster-facts'].nodes_provisioned
  name: Some nodes have not been provisioned
  include_tasks: node_provision_hosted_k3s.yml

- when: inventory_hostname == groups['cluster_nodes'] | first
  block:

    - name: Retrieve k3s config
      command:
        cat /etc/rancher/k3s/k3s.yaml
      register: _result
      changed_when: _result is not defined
      become: true
      become_user: root

    - name: Save the kube config
      set_fact:
        kube_config: "{{ _result.stdout | trim }}"
      delegate_to: 'cluster-facts'
      delegate_facts: true

- when: inventory_hostname in (groups['bastion_node'] | default([groups['cluster_nodes'] | first]))
  name: Complete the setup of the infra node
  block:

    - name: Check for .kube/config file on infra host
      stat:
        path: .kube/config
      register: _result

    - name: Set fact that .kube/config exists
      set_fact:
        kube_config_exists: "{{ _result.stat.exists }}"

    - when: not kube_config_exists
      name: Copy the k8s_config to .kube/config
      block:

        - name: Create folders on the infra node
          file:
            path: "{{ item }}"
            state: directory
          loop:
          - '.kube'
          - '.local/bin'

        - name: Copy the k8s_config to .kube/config on the infra node
          copy:
            content: |
              {{ hostvars['cluster-facts']['kube_config'] }}
            dest: .kube/config
            mode: '0600'

        - name: Replace references to localhost ipaddr with infra hostname
          replace:
            path: .kube/config
            regexp: '^    server: https://127.0.0.1:6443$'
            replace: "{{ '    server: https://' + hostvars['cluster-facts'].cluster_nip_fqdn + ':6443' }}"

        - name: Replace all references to localhost with infra hostname
          replace:
            path: .kube/config
            regexp: 'default'
            replace: "{{ cluster_name }}"

        - name: Remove any stale cluster_dir kubeconfig
          file:
            path: "{{ cluster_dir + '/kubeconfig' }}"
            state: absent
          delegate_to: 'cluster-facts'

        - name: Load contents of kubeconfig
          command:
            cat .kube/config
          register: _result

        - name: Write local kubeconfig
          copy:
            content: |
              {{ _result.stdout }}
            dest: "{{ cluster_dir + '/kubeconfig' }}"
            mode: '0600'
          delegate_to: 'cluster-facts'

    - name: Update cluster_status.json with status of deployed
      copy:
        content: |
          {
              "status": "deployed"
          }
        dest: "{{ cluster_dir + '/cluster_status.json' }}"
        mode: '0644'
      changed_when: false
      delegate_to: 'cluster-facts'
