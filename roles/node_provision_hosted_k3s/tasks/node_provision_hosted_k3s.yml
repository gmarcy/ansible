---

- when: inventory_hostname == groups['cluster_nodes'] | first
  name: Perform once only tasks on first cluster node
  block:

    - name: Fetch the list of k3s release channels
      ansible.builtin.uri:
        url: 'https://update.k3s.io/v1-release/channels'
        method: GET
      register: _result_k3s_channels

    - name: Fetch the latest version from the stable channel
      ansible.builtin.set_fact:
        k3s_latest_stable: "{{ k3s_channels.data | selectattr('name', '==', 'stable') | map(attribute='latest') | first }}"
      vars:
        k3s_channels: "{{ _result_k3s_channels.json }}"

    - name: Set the kubernetes version from the k3s version
      ansible.builtin.set_fact:
        k8s_version: "{{ k3s_latest_stable | regex_replace('v(.*)\\+k3s.*', '\\1') }}"
      delegate_to: 'cluster-facts'
      delegate_facts: true

    - name: Create registries file template
      ansible.builtin.copy:
        content: |
          mirrors:
          configs:
            "quay.io":
              auth:
                username: {{ quay_io_user }}
                password: {{ quay_io_token }}
              tls:
                insecure_skip_verify: true
            {% if secrets.artifactory_token is defined %}
            "{{ artifactory_fqdn }}":
              auth:
                username: {{ artifactory_user }}
                password: {{ artifactory_token }}
              tls:
                insecure_skip_verify: true
            {% endif %}
        dest: "{{ cluster_dir + '/registries.yaml.j2' }}"
        mode: '0600'
      vars:
        secrets: "{{ hostvars['playbook-secrets'].secrets }}"
        quay_io_user_secret: "{{ secrets.quay_io_user }}"
        quay_io_token_secret: "{{ secrets.quay_io_token }}"
        quay_io_user: "{{ lookup(quay_io_user_secret.module, quay_io_user_secret.param) | trim }}"
        quay_io_token: "{{ lookup(quay_io_token_secret.module, quay_io_token_secret.param) | trim }}"
        artifactory_fqdn_secret: "{{ secrets.artifactory_fqdn }}"
        artifactory_user_secret: "{{ secrets.artifactory_user }}"
        artifactory_token_secret: "{{ secrets.artifactory_token }}"
        artifactory_fqdn: "{{ lookup(artifactory_fqdn_secret.module, artifactory_fqdn_secret.param) | trim }}"
        artifactory_user: "{{ lookup(artifactory_user_secret.module, artifactory_user_secret.param) | trim }}"
        artifactory_token: "{{ lookup(artifactory_token_secret.module, artifactory_token_secret.param) | trim }}"
      delegate_to: 'cluster-facts'

- when: inventory_hostname in groups['cluster_nodes']
  name: Common setup for all cluster nodes
  block:

    - when: hostvars['cluster-facts'].using_registry_proxy | default(false)
      name: Copy cert from infra node when we have one provisioned
      block:

        - name: Install ca-certificates package
          ansible.builtin.package:
            name: ca-certificates
            state: present

        - name: Copy the ca cert into the cluster node
          ansible.builtin.copy:
            content: |
              {{ hostvars['cluster-facts']['ca_cert_contents'] }}
            dest: '/etc/pki/ca-trust/source/anchors/container_registry_proxy.crt'
            mode: '0644'
          when: ansible_distribution == 'CentOS'

        - name: Copy the ca cert into the cluster node
          ansible.builtin.copy:
            content: |
              {{ hostvars['cluster-facts']['ca_cert_contents'] }}
            dest: '/usr/share/ca-certificates/container_registry_proxy.crt'
            mode: '0644'
          when: ansible_distribution != 'CentOS'

        - name: Add line for certificate to /etc/ca-certificates.conf
          ansible.builtin.lineinfile:
            path: '/etc/ca-certificates.conf'
            regexp: '^container_registry_proxy.crt$'
            line: 'container_registry_proxy.crt'
          when: ansible_distribution != 'CentOS'

        - name: Update the ca certs on the cluster node
          ansible.builtin.command: |
            update-ca-trust extract
          register: _result
          changed_when: _result.rc == 0
          when: ansible_distribution == 'CentOS'

        - name: Update the ca certs on the cluster node
          ansible.builtin.command: |
            update-ca-certificates --fresh
          register: _result
          changed_when: _result.rc == 0
          when: ansible_distribution != 'CentOS'

        - name: Set fact for environment_proxy
          ansible.builtin.set_fact:
            environment_proxy:
              HTTP_PROXY: "{{ 'http://registry-proxy.' + k8s_infra_privateip + '.nip.io:3128' }}"
              HTTPS_PROXY: "{{ 'http://registry-proxy.' + k8s_infra_privateip + '.nip.io:3128' }}"
              NO_PROXY: "localhost,127.0.0.1,0.0.0.0,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,.local,.svc"
          vars:
            services_host: "{{ hostvars['cluster-facts'].services_host }}"
            k8s_infra_privateip: "{{ hostvars[services_host].privateip }}"

    - name: Create k3s folder
      ansible.builtin.file:
        path: '/etc/rancher/k3s'
        state: directory
        mode: '0755'
      become: true
      become_user: root

    - name: Fetch k3s.sh
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: ./k3s.sh
        mode: '0755'
        validate_certs: false
      register: _result

    - name: Create registries file
      ansible.builtin.template:
        src: "{{ cluster_dir + '/registries.yaml.j2' }}"
        dest: '/etc/rancher/k3s/registries.yaml'
        mode: '0600'
      become: true
      become_user: root

    - name: Set k3s node subcommand based on cluster role
      ansible.builtin.set_fact:
        k3s_subcommand: "{{ 'server' if cluster_role == 'master' else 'agent' }}"
        k3s_common_args: --disable=traefik --disable=servicelb --disable=local-storage

- when: inventory_hostname in (groups['bastion_node'] | default([groups['cluster_nodes'] | first]))
  name: Setup specific to the host with external access
  block:

    - name: Create folders on bastion node
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
      - "{{ user_home + '/.local/bin' }}"
      - "{{ user_home + '/.ssh' }}"
      - "{{ user_home + '/tmp' }}"

    - name: Download the kubectl cli for our version of kubernetes
      ansible.builtin.get_url:
        url: "{{ 'https://dl.k8s.io/release/v' + k8s_version + '/bin/' + os_family + '/' + cpu_arch + '/kubectl' }}"
        dest: "{{ user_home + '/.local/bin/kubectl' }}"
        mode: '0755'
      vars:
        k8s_version: "{{ hostvars['cluster-facts'].k8s_version }}"

- when: inventory_hostname == groups['cluster_nodes'] | first
  name: Setup specific to the first server node of the control plane
  block:

    - name: Print out the environment we are passing into the script
      ansible.builtin.debug:
        msg: "{{ environment }}"
      vars:
        k8s_version: "{{ hostvars['cluster-facts'].k8s_version }}"
        environment_k3s:
          INSTALL_K3S_CHANNEL: "{{ 'v' + k8s_version.split('.')[:2] | join('.') }}"
          INSTALL_K3S_VERSION: "{{ k3s_latest_stable }}"
        environment: "{{ environment_k3s | combine(environment_proxy | default({})) }}"

    - name: Run script
      ansible.builtin.command: |
        /bin/bash ./k3s.sh {{ k3s_subcommand }} {{ k3s_common_args }} --cluster-init {{ tls_san_args | list | join(' ') }}
      environment: "{{ environment_k3s | combine(environment_proxy | default({})) }}"
      vars:
        cluster_fqdn: "{{ hostvars['cluster-facts'].cluster_fqdn }}"
        cluster_nip_fqdn: "{{ hostvars['cluster-facts'].cluster_nip_fqdn }}"
        k8s_version: "{{ hostvars['cluster-facts'].k8s_version }}"
        tls_san_args:
        - "{{ '--tls-san=' + cluster_nip_fqdn }}"
        - "{{ '--tls-san=console.' + cluster_nip_fqdn }}"
        - "{{ '--tls-san=*.apps.' + cluster_nip_fqdn }}"
        - "{{ '--tls-san=console.' + cluster_fqdn }}"
        - "{{ '--tls-san=' + cluster_fqdn }}"
        environment_k3s:
          INSTALL_K3S_CHANNEL: "{{ 'v' + k8s_version.split('.')[:2] | join('.') }}"
          INSTALL_K3S_VERSION: "{{ k3s_latest_stable }}"
      register: _result
      changed_when: _result.rc == 0

    - when: hostvars[inventory_hostname].package_manager == 'community.general.rpm_ostree_pkg'
      name: Apply ostree updates
      ansible.builtin.command: |
        rpm-ostree apply-live --allow-replacement
      become: true
      become_user: root
      register: _result
      failed_when: _result is not defined
      changed_when: _result.rc == 0

    - name: Add proxy settings to the containerd environment
      ansible.builtin.blockinfile:
        block: |
          CONTAINERD_HTTP_PROXY={{ environment_proxy.HTTP_PROXY }}
          CONTAINERD_HTTPS_PROXY={{ environment_proxy.HTTPS_PROXY }}
          CONTAINERD_NO_PROXY={{ environment_proxy.NO_PROXY }}
        path: '/etc/systemd/system/k3s.service.env'
        marker: '# {mark} PROXY'
        create: true
        mode: '0600'
      when: hostvars['cluster-facts'].using_registry_proxy | default(false)

    - name: Check systemctl status of k3s service
      ansible.builtin.systemd:
        unit: k3s
        state: restarted
      become: true
      become_user: root
      register: _result

    - name: Wait until k3s.yaml has been created
      ansible.builtin.stat:
        path: /etc/rancher/k3s/k3s.yaml
      register: _result
      until: _result.stat.exists

    - name: Load node-token
      ansible.builtin.command: |
        cat /var/lib/rancher/k3s/server/node-token
      register: _result
      become: true
      become_user: root
      changed_when: _result is not defined

    - name: Set k3s_node_token fact
      ansible.builtin.set_fact:
        k3s_node_token: "{{ _result.stdout | trim }}"
      delegate_to: 'cluster-facts'
      delegate_facts: true

- when: inventory_hostname in groups['cluster_nodes'][1:]
  name: Setup the remaining cluster nodes
  block:

    - name: Run script
      ansible.builtin.command: |
        /bin/bash ./k3s.sh {{ k3s_subcommand }} {{ k3s_common_args }} --server {{ k3s_server }} --token {{ k3s_token }}
      environment: "{{ environment_k3s | combine(environment_proxy | default({})) }}"
      vars:
        services_host: "{{ hostvars['cluster-facts'].services_host }}"
        k8s_infra_privateip: "{{ hostvars[services_host].privateip }}"
        k3s_server: "{{ 'https://' + hostvars[groups['cluster_nodes'] | first]['fqdn'] + ':6443' }}"
        k3s_token: "{{ hostvars['cluster-facts']['k3s_node_token'] }}"
        k8s_version: "{{ hostvars['cluster-facts']['k8s_version'] }}"
        environment_k3s:
          INSTALL_K3S_CHANNEL: "{{ 'v' + k8s_version.split('.')[:2] | join('.') }}"
      register: _result
      changed_when: _result.rc == 0

    - name: Add proxy settings to the containerd environment
      ansible.builtin.blockinfile:
        block: |
          CONTAINERD_HTTP_PROXY={{ environment_proxy.HTTP_PROXY }}
          CONTAINERD_HTTPS_PROXY={{ environment_proxy.HTTPS_PROXY }}
          CONTAINERD_NO_PROXY={{ environment_proxy.NO_PROXY }}
        path: '/etc/systemd/system/k3s-agent.service.env'
        marker: '# {mark} PROXY'
        create: true
        mode: '0600'
      when: hostvars['cluster-facts'].using_registry_proxy | default(false)

    - name: Check systemctl status of k3s-agent service
      ansible.builtin.systemd:
        unit: k3s-agent
        state: restarted
      register: _result
      when: false

- when: inventory_hostname in groups['cluster_nodes']
  name: Create marker for node provisioned
  ansible.builtin.file:
    path: .ansible/k3s_node_provisioned
    state: touch
    mode: '0644'
  changed_when: false
