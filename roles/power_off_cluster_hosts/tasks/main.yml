---

- name: Set ipmi facts for all cluster hosts
  ansible.builtin.set_fact:
    cluster_ipmi_hosts: "{{ cluster_ipmi_hosts | default([]) | union([item[1] | combine({'name': item[0]})]) }}"
  loop: "{{ cluster_hostnames | zip(cluster_hostnames | map('extract', hostvars, 'ipmi_info')) }}"
  when: item[1].interface != 'none'

- when: cluster_ipmi_hosts is defined
  name: Process all hosts which have ipmi info
  block:

    - name: Set fact for common ipmitool arguments
      ansible.builtin.set_fact:
        ipmitool_args: "-E -U {{ ipmitool_username }}"

    - name: Check the power status of the cluster hosts
      ansible.builtin.command: ipmitool {{ ipmitool_args }} -I {{ ipmitool_interface }} -H {{ ipmitool_host }} chassis power status
      environment:
        IPMI_PASSWORD: "{{ ipmitool_password }}"
      loop: "{{ cluster_ipmi_hosts }}"
      vars:
        ipmitool_interface: "{{ item.interface }}"
        ipmitool_host: "{{ item.address }}"
      register: _result_power_status
      changed_when: false

    - name: Collect list of powered on hosts
      ansible.builtin.set_fact:
        ipmi_hosts_powered_on: "{{ ipmi_hosts_powered_on | default([]) | union([item.item]) }}"
      loop: "{{ _result_power_status.results }}"
      when: item.stdout == 'Chassis Power is on'

    - name: Clear intermediate results
      ansible.builtin.set_fact:
        _result_power_status: {}

    - when: ipmi_hosts_powered_on is defined
      name: Power off hosts if any are powered on
      block:

        - name: Power off the cluster hosts
          ansible.builtin.command: ipmitool {{ ipmitool_args }} -I {{ ipmitool_interface }} -H {{ ipmitool_host }} chassis power off
          environment:
            IPMI_PASSWORD: "{{ ipmitool_password }}"
          loop: "{{ ipmi_hosts_powered_on }}"
          vars:
            ipmitool_interface: "{{ item.interface }}"
            ipmitool_host: "{{ item.address }}"
          register: _result
          changed_when: false

        - name: Confirm the power is off for cluster hosts
          ansible.builtin.command: ipmitool {{ ipmitool_args }} -I {{ ipmitool_interface }} -H {{ ipmitool_host }} chassis power status
          environment:
            IPMI_PASSWORD: "{{ ipmitool_password }}"
          loop: "{{ ipmi_hosts_powered_on }}"
          vars:
            ipmitool_interface: "{{ item.interface }}"
            ipmitool_host: "{{ item.address | default('') }}"
          register: _result
          delay: 5
          retries: 12
          until: _result.stdout == 'Chassis Power is off'
          changed_when: false
