---

- name: Get the cluster status
  ansible.builtin.include_role:
    name: gmarcy.ansible.cluster_gather_facts_fyre
    tasks_from: gather_cluster_status.yml

- when: _cluster_exists
  name: Delete the cluster
  block:

    - name: Assert that the cluster exists
      ansible.builtin.assert:
        that: cluster_name is in _clusters_list
        msg: "{{ 'Cluster with name ' + cluster_name + ' does not exist' }}"

    - name: Delete Fyre stack
      ansible.builtin.uri:
        url: "{{ fyre_clusterdeleteurl }}"
        method: "POST"
        user: "{{ _secrets.fyre_user }}"
        password: "{{ _secrets.fyre_apikey }}"
        validate_certs: false
        body_format: "json"
        force_basic_auth: "{{ options.fyre_force_basic_auth }}"
        body:
          cluster_name: "{{ cluster_name }}"
      register: _result_delete_cluster

    - name: Set fact for details_url
      ansible.builtin.set_fact:
        _details_url: "{{ _cluster_delete_json['details'] }}"
      vars:
        _cluster_delete_json: "{{ _result_delete_cluster.json }}"

    - name: Wait until cluster has completed deletion
      ansible.builtin.uri:
        url: "{{ _details_url }}"
        method: GET
        user: "{{ _secrets.fyre_user }}"
        password: "{{ _secrets.fyre_apikey }}"
        validate_certs: false
        force_basic_auth: "{{ options.fyre_force_basic_auth }}"
      register: _result_show_request
      changed_when: false
      delay: 20
      retries: 600
      until: (_result_show_request.status == 200) and (_result_show_request.json.request | length > 0) and not (_result_show_request.json.request[0].status in ['pending delete', 'deleting'])

- name: Clear _secrets fact
  ansible.builtin.set_fact:
    _secrets: {}

- name: Remove previous cluster dir
  ansible.builtin.file:
    path: "{{ cluster_dir }}"
    state: absent
