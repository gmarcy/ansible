---

- when: inventory_hostname == (groups['all_nodes'] | first)
  name: Tasks which are only performed on the first VM
  block:

    - name: Fetch remote autowas configuration
      ansible.builtin.fetch:
        dest: "{{ clusters_basedir + '/' }}"
        flat: true
        src: "{{ autowas_regression_config_dir + '/' + autowas_config_file }}"
        mode: '0600'
      vars:
        autowas_regression_config_dir: "{{ hostvars['autowas-facts'].options.autowas_regression_config_dir }}"

    - name: Check that fetch produced a non-empty file
      ansible.builtin.stat:
        path: "{{ clusters_basedir + '/' + autowas_config_file }}"
      register: _result
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Assert that it is not empty
      ansible.builtin.assert:
        that: _result.stat.size > 0
        msg: 'The autowas config file fetch returned an empty file.'

    - name: Create a copy of the file with .j2 suffix
      ansible.builtin.copy:
        src: "{{ clusters_basedir + '/' + autowas_config_file }}"
        dest: "{{ template_path }}"
        mode: '0600'
      register: _result
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Update LEVEL line
      ansible.builtin.lineinfile:
        path: "{{ template_path }}"
        regexp: '^  LEVEL = latest'
        line: '  LEVEL = "{% raw %}{{ autowas_was_level }}{% endraw %}"'
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Update HOST_NAME_1 line
      ansible.builtin.lineinfile:
        path: "{{ template_path }}"
        regexp: '^  HOST_NAME_1 = ""'
        line: '  HOST_NAME_1 = "{% raw %}{{ first_server_fqdn }}{% endraw %}"'
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Update USER_1 line
      ansible.builtin.lineinfile:
        path: "{{ template_path }}"
        regexp: '^  USER_1 = ""'
        line: '  USER_1 = "{% raw %}{{ autowas_cfg_ssh_user }}{% endraw %}"'
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Update INSTALL_DIR_1 line
      ansible.builtin.lineinfile:
        path: "{{ template_path }}"
        regexp: '^  INSTALL_DIR_1 = ""'
        line: '  INSTALL_DIR_1 = "{% raw %}{{ autowas_cfg_install_path_basedir }}{% endraw %}"'
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Update HOST_NAME_2 line
      ansible.builtin.lineinfile:
        path: "{{ template_path }}"
        regexp: '^  HOST_NAME_2 = ""'
        line: '  HOST_NAME_2 = "{% raw %}{{ second_server_fqdn }}{% endraw %}"'
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Update USER_2 line
      ansible.builtin.lineinfile:
        path: "{{ template_path }}"
        regexp: '^  USER_2 = ""'
        line: '  USER_2 = "{% raw %}{{ autowas_cfg_ssh_user }}{% endraw %}"'
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Update INSTALL_DIR_2 line
      ansible.builtin.lineinfile:
        path: "{{ template_path }}"
        regexp: '^  INSTALL_DIR_2 = ""'
        line: '  INSTALL_DIR_2 = "{% raw %}{{ autowas_cfg_install_path_basedir }}{% endraw %}"'
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Update serverPassword line
      ansible.builtin.lineinfile:
        path: "{{ template_path }}"
        regexp: "{{ '^  serverPassword = ' + autowas_ldap_password }}"
        line: '  serverPassword = "{% raw %}{{ autowas_ldap_password }}{% endraw %}"'
      vars:
        secrets: "{{ hostvars['playbook-secrets'].secrets }}"
        autowas_ldap_password_secret: "{{ secrets.autowas_ldap_password }}"
        autowas_ldap_password: "{{ lookup(autowas_ldap_password_secret.module, autowas_ldap_password_secret.param) | trim }}"
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Update admin_password line
      ansible.builtin.lineinfile:
        path: "{{ template_path }}"
        regexp: "{{ '^  admin_password = ' + autowas_ihs_password }}"
        line: '  admin_password = "{% raw %}{{ autowas_ihs_password }}{% endraw %}"'
      vars:
        secrets: "{{ hostvars['playbook-secrets'].secrets }}"
        autowas_ihs_password_secret: "{{ secrets.autowas_ihs_password }}"
        autowas_ihs_password: "{{ lookup(autowas_ihs_password_secret.module, autowas_ihs_password_secret.param) | trim }}"
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Check for empty template source
      ansible.builtin.stat:
        path: "{{ template_path }}"
      register: _result
      delegate_to: 'autowas-facts'
      delegate_facts: true

    - name: Assert that it is not empty
      ansible.builtin.assert:
        that: _result.stat.size > 0
        msg: 'The autowas config file template is an empty file.'

    - name: Create autowas_config_dir folder
      ansible.builtin.file:
        path: "{{ autowas_config_dir }}"
        state: directory
        mode: '0755'

    - name: Create default.cfg from template
      ansible.builtin.template:
        src: "{{ template_path }}"
        dest: "{{ autowas_config_dir + '/default.cfg' }}"
        mode: '0644'
      vars:
        first_server_fqdn: "{{ hostvars[groups['all_nodes'][0]].fqdn }}"
        second_server_fqdn: "{{ hostvars[groups['all_nodes'][1]].fqdn }}"
        autowas_cfg_ssh_user: "{{ hostvars['autowas-facts'].options.autowas_cfg_ssh_user }}"
        autowas_cfg_install_path_basedir: "{{ hostvars['autowas-facts'].options.autowas_cfg_install_path_basedir }}"
        secrets: "{{ hostvars['playbook-secrets'].secrets }}"
        autowas_ldap_password_secret: "{{ secrets.autowas_ldap_password }}"
        autowas_ihs_password_secret: "{{ secrets.autowas_ihs_password }}"
        autowas_ldap_password: "{{ lookup(autowas_ldap_password_secret.module, autowas_ldap_password_secret.param) | trim }}"
        autowas_ihs_password: "{{ lookup(autowas_ihs_password_secret.module, autowas_ihs_password_secret.param) | trim }}"

    - name: Install tWAS server
      ansible.builtin.shell:
        chdir: "{{ autowas_config_dir }}"
        cmd: source {{ autowas_env_script }} && cfg install && touch {{ install_marker }}
        creates: "{{ install_marker }}"
        executable: /bin/bash
      register: _result
      changed_when: _result.start != None

    - name: Create tWAS server topology
      ansible.builtin.shell:
        chdir: "{{ autowas_config_dir }}"
        cmd: source {{ autowas_env_script }} && cfg createTopology && touch {{ topology_marker }}
        creates: "{{ topology_marker }}"
        executable: /bin/bash
      register: _result
      changed_when: _result.start != None

    - name: Generate bootstrap config
      ansible.builtin.shell:
        chdir: "{{ autowas_config_dir }}"
        cmd: source {{ autowas_env_script }} && cfg generateBootstrap && touch {{ bootstrap_marker }}
        creates: "{{ bootstrap_marker }}"
        executable: /bin/bash
      register: _result
      changed_when: _result.start != None

  vars:
    clusters_basedir: "{{ hostvars['cluster-facts'].clusters_basedir }}"
    autowas_basedir: "{{ hostvars['autowas-facts'].options.autowas_basedir }}"
    autowas_config_dir: "{{ hostvars['autowas-facts'].options.autowas_config_dir }}"
    autowas_config_file_suffix: "{{ hostvars['autowas-facts'].options.autowas_config_file_suffix }}"
    autowas_was_level: "{{ hostvars['autowas-facts'].options.autowas_was_level }}"
    autowas_was_release: "{{ hostvars['autowas-facts'].options.autowas_was_release }}"
    autowas_config_file: "{{ autowas_was_release + autowas_config_file_suffix }}"
    template_path: "{{ clusters_basedir + '/' + autowas_config_file + '.j2' }}"
    autowas_env_script: "{{ autowas_basedir + '/bin/AutoWASEnv.sh' }}"
    install_marker: "{{ autowas_config_dir + '/.install_completed' }}"
    topology_marker: "{{ autowas_config_dir + '/.createTopology_completed' }}"
    bootstrap_marker: "{{ autowas_config_dir + '/.generateBootstrap_completed' }}"
