---

- name: Check if we have podman installed
  ansible.builtin.command: |
    podman --version
  register: _result
  changed_when: false

- name: Set podman_is_installed fact
  ansible.builtin.set_fact:
    podman_is_installed: "{{ _result.rc == 0 }}"
  delegate_to: 'playbook-facts'
  delegate_facts: true

- when: not hostvars['playbook-facts']['podman_is_installed']
  name: Install podman
  block:

    - name: Install podman
      ansible.builtin.package:
        name: podman
        state: present
        use: "{{ hostvars[inventory_hostname].package_manager }}"
      become: true
      become_user: root

    - when: hostvars[inventory_hostname].package_manager == 'community.general.rpm_ostree_pkg'
      name: Apply rpm-ostree changes
      ansible.builtin.command: |
        rpm-ostree apply-live --allow-replacement
      become: true
      become_user: root
      register: _result
      changed_when: false
      failed_when: _result is not defined

- name: Get list of existing system connection definitions
  ansible.builtin.command: podman system connection list --format json
  register: _result_connections
  delegate_to: localhost-facts
  changed_when: false

- name: Remove any existing system connection definition
  ansible.builtin.command: podman system connection remove {{ item.Name }}
  loop: "{{ _result_connections.stdout | from_json }}"
  when: item.Name == inventory_hostname
  register: _result
  delegate_to: localhost-facts
  changed_when: false

- name: Reset local ssh keys
  ansible.builtin.known_hosts:
    name: "{{ item }}"
    state: absent
  loop:
  - "{{ inventory_hostname }}"
  - "{{ ansible_host }}"
  delegate_to: localhost-facts
  changed_when: false

- name: Enable and start podman.socket
  ansible.builtin.systemd:
    name: podman.socket
    enabled: true
    state: started
    scope: user
  become: "{{ gather_become_user | default('') | length > 0 }}"
  become_user: "{{ gather_become_user if (gather_become_user is defined) else omit }}"

- name: Start podman.service
  ansible.builtin.systemd:
    name: podman.service
    state: started
    scope: user
  become: "{{ gather_become_user | default('') | length > 0 }}"
  become_user: "{{ gather_become_user if (gather_become_user is defined) else omit }}"
  changed_when: false

- name: Change ssh_destination if using gather_become_user
  ansible.builtin.set_fact:
    ssh_destination: "{{ gather_become_user + '@' + ansible_ssh_host }}"
  when: gather_become_user is defined

- name: Add system connection definition
  ansible.builtin.command: |
    podman system connection add "{{ inventory_hostname }}" --identity "{{ hostvars['localhost-facts'].ssh_keypair_path }}" "{{ system_connection_uri }}"
  vars:
    system_connection_uri: "{{ 'ssh://' + ssh_destination + ':' + (ssh_remote_port | default(22) | string) + runtime_path + '/podman/podman.sock' }}"
  register: _result
  delegate_to: localhost-facts
  changed_when: false
