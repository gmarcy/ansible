---

- name: Set facts used in this role
  ansible.builtin.set_fact:
    ansible_env: "{{ hostvars['localhost-facts'].ansible_env }}"
    cluster_dir: "{{ hostvars['cluster-facts'].cluster_dir }}"
    cluster_name: "{{ hostvars['cluster-facts'].options.cluster_name }}"
    local_home: "{{ hostvars['localhost-facts'].local_home }}"

- name: Set secret facts used in this role
  ansible.builtin.set_fact:
    _secrets:
      fyre_user: "{{ fyre_user }}"
      fyre_apikey: "{{ fyre_apikey }}"
  vars:
    secrets: "{{ hostvars['playbook-secrets'].secrets }}"
    fyre_user_secret: "{{ secrets.fyre_user }}"
    fyre_apikey_secret: "{{ secrets.fyre_apikey }}"
    fyre_user: "{{ lookup(fyre_user_secret.module, fyre_user_secret.param) | trim }}"
    fyre_apikey: "{{ lookup(fyre_apikey_secret.module, fyre_apikey_secret.param) | trim }}"
  no_log: true

- name: Assert that the inventory_hostname is 'fyreocp-provisioner'
  ansible.builtin.assert:
    that: inventory_hostname == 'fyreocp-provisioner'
    msg: "{{ 'The inventory_hostname for this role was \"' + inventory_hostname + '\" and not \"fyreocp-provisioner\"' }}"

- name: Set ssh_keypair to empty
  ansible.builtin.set_fact:
    ssh_keypair: {}

- name: Search for a keypair to use
  ansible.builtin.set_fact:
    ssh_keypair:
      ssh_private_key: "{{ prvkey | b64encode }}"
      ssh_public_key: "{{ pubkey | b64encode }}"
  no_log: "{{ noLog }}"
  loop:
  - "{{ local_home + '/.ssh/' + ssh_keypair_path_prefix + 'id_' + ssh_keytype }}"
  loop_control:
    label: "{{ item }}"
  vars:
    prvkey: "{{ lookup('file', item, errors='ignore') | default('') }}"
    pubkey: "{{ lookup('file', item + '.pub', errors='ignore') | default('') }}"
  when: ssh_keypair.keys() | length == 0 and pubkey != None and prvkey != None

- name: Set vars_static to default ssh keypair, defaults from host_vars and overrides from inventory
  ansible.builtin.set_fact:
    vars_static: "{{ ssh_keypair | combine(vars_host) | combine(vars_inventory | default({})) }}"

- name: Set vars_env to empty
  ansible.builtin.set_fact:
    vars_env: {}

- name: Add values to vars_env for all vars_static keys
  ansible.builtin.set_fact:
    vars_env: "{{ vars_env | combine({key: value}) }}"
  no_log: "{{ noLog }}"
  loop: "{{ matching_vars }}"
  loop_control:
    label: "{{ item }}"
  vars:
    matching_keys: "{{ vars_static.keys() | list | map('upper') }}"
    matching_vars: "{{ ansible_env | dict2items | selectattr('key', 'in', matching_keys) }}"
    key: "{{ item.key.lower() }}"
    value: "{{ item.value }}"
  when: value | string | length > 0

- name: Set vars_cli to empty
  ansible.builtin.set_fact:
    vars_cli: {}

- name: Add values to vars_cli for all vars_static keys
  ansible.builtin.set_fact:
    vars_cli: "{{ vars_cli | combine({key: value}) }}"
  no_log: "{{ noLog }}"
  loop: "{{ matching_vars }}"
  loop_control:
    label: "{{ item }}"
  vars:
    matching_keys: "{{ vars_static.keys() | list }}"
    matching_vars: "{{ hostvars[inventory_hostname] | dict2items | selectattr('key', 'in', matching_keys) }}"
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  when: value | string | length > 0

- name: Copy all variables into options map
  ansible.builtin.set_fact:
    options: "{{ vars_static | combine(vars_env | combine(vars_cli)) }}"
  no_log: "{{ noLog }}"

- name: Check if the name is in use
  ansible.builtin.uri:
    url: "{{ ocpplus_check_hostname }}"
    method: "GET"
    user: "{{ _secrets.fyre_user }}"
    password: "{{ _secrets.fyre_apikey }}"
    validate_certs: false
    force_basic_auth: "{{ options['fyre_force_basic_auth'] }}"
  register: _result_check_hostname
  changed_when: false
  failed_when: _result_check_hostname.status | default(404) not in [-1,200]
  delay: 20
  retries: 600
  until: _result_check_hostname.status != -1

- name: Assert that the cluster was not recently deleted
  ansible.builtin.assert:
    that: _result_check_hostname.json.status != 'warning' or _result_check_hostname.json.seconds is not defined
    msg: "{{ _result_check_hostname.json.details }}"

- name: Assert that the cluster exists
  ansible.builtin.assert:
    that: _result_check_hostname.json.status != 'success'
    msg: "{{ 'Cluster with name ' + cluster_name + ' does not exist' }}"

- name: Check status of the cluster
  ansible.builtin.uri:
    url: "{{ fyreocpplus_clusterstatusurl + '/status' }}"
    method: GET
    user: "{{ _secrets.fyre_user }}"
    password: "{{ _secrets.fyre_apikey }}"
    validate_certs: false
    force_basic_auth: "{{ options['fyre_force_basic_auth'] }}"
  register: _result_cluster_status
  changed_when: false
  failed_when: _result_cluster_status.status | default(404) not in [-1,200]
  delay: 20
  retries: 600
  until: _result_cluster_status.status != -1 and (_result_cluster_status.status == 400 or _result_cluster_status.json.deployed_status in ['configuring', 'deleting', 'deployed'])

- name: Set cluster_status fact
  ansible.builtin.set_fact:
    deployed_status: "{{ _result_cluster_status.json.deployed_status }}"

- when: deployed_status == 'deleting'
  name: Wait for clusters being deleted
  block:

    - when: _result_cluster_status.json.status.request.request_id is defined
      name: Extract the request id if there is one
      ansible.builtin.set_fact:
        request_id: "{{ _result_cluster_status.json.status.request.request_id }}"

    - when: request_id is not defined
      name: Wait for name to become available
      block:

        - name: Wait until name available check returns success or that we need to wait for the name to become available again
          ansible.builtin.uri:
            url: "{{ ocpplus_check_hostname }}"
            method: "GET"
            user: "{{ _secrets.fyre_user }}"
            password: "{{ _secrets.fyre_apikey }}"
            validate_certs: false
            force_basic_auth: "{{ options['fyre_force_basic_auth'] }}"
          register: _result_check_hostname
          changed_when: false
          failed_when: _result_check_hostname.status | default(404) not in [-1,200]
          delay: 20
          retries: 600
          until: >
            _result_check_hostname.status != -1 and
            (_result_check_hostname.json.status == 'success' or _result_check_hostname.json.seconds is defined)

- when: deployed_status == 'configuring'
  name: Wait for clusters being configured
  block:

    - when: _result_cluster_status.json.status.request.request_id is defined
      name: Extract the request id if there is one
      ansible.builtin.set_fact:
        request_id: "{{ _result_cluster_status.json.status.request.request_id }}"

    - when: request_id is defined
      name: Wait until the request we are waiting for completes
      ansible.builtin.uri:
        url: "{{ 'https://ocpapi.svl.ibm.com/v1/ocp/request/' + (request_id | string) }}"
        method: GET
        user: "{{ _secrets.fyre_user }}"
        password: "{{ _secrets.fyre_apikey }}"
        validate_certs: false
        force_basic_auth: "{{ options['fyre_force_basic_auth'] }}"
      register: _result_request_status
      changed_when: false
      failed_when: _result_request_status.status | default(404) not in [-1,200]
      delay: 20
      retries: 600
      until: _result_request_status.status != -1 and _result_request_status.json.request.complete == _result_request_status.json.request.task_count

    - name: Wait for cluster build completion
      ansible.builtin.uri:
        url: "{{ fyreocpplus_clusterstatusurl + '/status' }}"
        method: GET
        user: "{{ _secrets.fyre_user }}"
        password: "{{ _secrets.fyre_apikey }}"
        validate_certs: false
        force_basic_auth: "{{ options['fyre_force_basic_auth'] }}"
      register: _result_cluster_status
      changed_when: false
      failed_when: _result_cluster_status.status | default(404) not in [-1,200]
      delay: 20
      retries: 600
      until: _result_cluster_status.status != -1 and (_result_cluster_status.status == 400 or _result_cluster_status.json.deployed_status in ['deployed'])

    - name: Set cluster_status fact
      ansible.builtin.set_fact:
        deployed_status: "{{ _result_cluster_status.json.deployed_status }}"

- when: deployed_status == 'deployed'
  name: Wait for clusters being deployed
  block:

    - name: Delete Fyre OCP stack
      ansible.builtin.uri:
        url: "{{ fyreocpplus_clusterstatusurl }}"
        method: "DELETE"
        user: "{{ _secrets.fyre_user }}"
        password: "{{ _secrets.fyre_apikey }}"
        validate_certs: false
        force_basic_auth: true
        status_code: [200, 400]
      register: _fyre_result
      failed_when: _fyre_result.status | default(404) not in [-1,200,400]

    - name: Set request_id fact
      ansible.builtin.set_fact:
        request_id: "{{ _fyre_result.json.request_id }}"

- when: request_id is defined
  name: Wait until the request we are waiting for completes
  ansible.builtin.uri:
    url: "{{ 'https://ocpapi.svl.ibm.com/v1/ocp/request/' + (request_id | string) }}"
    method: GET
    user: "{{ _secrets.fyre_user }}"
    password: "{{ _secrets.fyre_apikey }}"
    validate_certs: false
    force_basic_auth: "{{ options['fyre_force_basic_auth'] }}"
  register: _result_request_status
  changed_when: false
  failed_when: _result_request_status.status | default(404) not in [-1,200]
  delay: 20
  retries: 600
  until: _result_request_status.status != -1 and _result_request_status.json.request.complete == _result_request_status.json.request.task_count

- name: Clear _secrets fact
  ansible.builtin.set_fact:
    _secrets: {}

- name: Remove previous cluster dir
  ansible.builtin.file:
    path: "{{ cluster_dir }}"
    state: absent
