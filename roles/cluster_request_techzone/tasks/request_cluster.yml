---

- name: Set facts used in this role
  ansible.builtin.set_fact:
    itz_description: 'testing automation of redhat developer hub environments'
    itz_location:
      datacenter: any
      geo: "{{ itz_geo }}"
      region: any
    itz_purpose: Education

- name: We only handle timezone offsets that are an even number of hours
  ansible.builtin.assert:
    that:
    - utc_offset | length == 5
    - utc_offset[0] in ['+','-']
    - utc_offset[3:5] == '00'
  vars:
    utc_offset: "{{ '%z' | ansible.builtin.strftime }}"

- name: Retrieve our user information
  ansible.builtin.uri:
    url: 'https://auth.techzone.ibm.com/user'
    method: GET
    headers:
      Authorization: "{{ 'Bearer ' + (lookup('unvault', hostvars['playbook-secrets']['itz_api_token']) | trim) }}"
    follow_redirects: all
    validate_certs: false
  register: _result

- name: Set itz_user fact
  ansible.builtin.set_fact:
    itz_user: "{{ _result.json }}"

# - ansible.builtin.fail: msg=stopping

- name: Lookup the platform with the name we want
  ansible.builtin.uri:
    url: "{{ 'https://api.techzone.ibm.com/api/platform?' + query_param }}"
    method: GET
    headers:
      accept: 'application/json'
      Authorization: "{{ 'Bearer ' + (lookup('unvault', hostvars['playbook-secrets']['itz_api_token']) | trim) }}"
    validate_certs: false
  vars:
    where_param:
      name: "{{ itz_platforms[itz_platform_type]['name'] }}"
    query_param: "{{ 'where=' + (where_param | to_json | urlencode) }}"
  register: _result
  no_log: true

- name: Set itz_platform fact
  ansible.builtin.set_fact:
    itz_platform: "{{ _platform }}"
  vars:
    _platform: "{{ _result.json | selectattr('collection.name', '==', itz_collection_name) | flatten | first }}"

- when: false
  name: It would be nice if we could lookup a policy by name, but that requires admin auth
  block:

    - name: Lookup the policy with the name we want
      ansible.builtin.uri:
        url: "{{ 'https://api.techzone.ibm.com/api/policy?' + query_param }}"
        method: GET
        headers:
          accept: 'application/json'
          Authorization: "{{ 'Bearer ' + (lookup('unvault', hostvars['playbook-secrets']['itz_api_token']) | trim) }}"
        validate_certs: false
      vars:
        where_param:
          name: "{{ itz_policies[itz_purpose]['name'] }}"
        query_param: "{{ 'where=' + (where_param | to_json | urlencode) }}"
      register: _result

    - name: Set itz_policy fact
      ansible.builtin.set_fact:
        itz_policy: "{{ _result.json | flatten | first }}"

- name: Retrieve the policy we want to use
  ansible.builtin.uri:
    url: "{{ 'https://api.techzone.ibm.com/api/policy/' + itz_policies[itz_purpose]['id'] }}"
    method: GET
    headers:
      accept: 'application/json'
      Authorization: "{{ 'Bearer ' + (lookup('unvault', hostvars['playbook-secrets']['itz_api_token']) | trim) }}"
    validate_certs: false
  register: _result

- name: Set itz_policy fact
  ansible.builtin.set_fact:
    itz_policy: "{{ _result.json }}"

# - ansible.builtin.fail: msg=stopping

- name: Retrieve existing reservations information
  ansible.builtin.uri:
    url: "{{ 'https://api.techzone.ibm.com/api/reservation/ibmcloud-2?' + query_param }}"
    method: GET
    headers:
      accept: 'application/json'
      Authorization: "{{ 'Bearer ' + (lookup('unvault', hostvars['playbook-secrets']['itz_api_token']) | trim) }}"
    validate_certs: false
  vars:
    where_param:
      myId: 'gmarcy@us.ibm.com'
      status:
      - Provisioning
      - Ready
      - Scheduled
    query_param: "{{ 'where=' + (where_param | to_json | urlencode) }}"
  register: _result

# - ansible.builtin.fail: msg=stopping

- name: Set adjustment_for_utc fact
  ansible.builtin.set_fact:
    adjustment_for_utc: "{{ 0 - ((('%z' | ansible.builtin.strftime)[0:3] | int) * 60 * 60) }}"

- name: Create a new reservation
  ansible.builtin.uri:
    url: 'https://api.techzone.ibm.com/api/reservation/ibmcloud-2'
    method: POST
    headers:
      accept: 'application/json'
      Authorization: "{{ 'Bearer ' + (lookup('unvault', hostvars['playbook-secrets']['itz_api_token']) | trim) }}"
    body_format: json
    body:
      accountPool: itzvmware
      datacenter: "{{ itz_location.datacenter | default(selected_region.datacenter) }}"
      description: "{{ itz_description }}"
      dynamicOutputs:
      - default: ''
        description: 'Share datastore cluster'
        name: 'shared_datastore_cluster'
        type: 'bool'
        value: 'true'
      end: "{{ end }}"
      geo: "{{ itz_location.geo }}"
      platform:
        approvalGated: false
        automationBucket: public-solutions
        cloudTarget: null
        collection:
          id: "{{ itz_platform.collection.id }}"
          name: "{{ itz_platform.collection.name }}"
          status: Active
        emailTemplate: null
        id: "{{ itz_platform.id }}"
        infrastructure: "{{ itz_platform.infrastructure }}"
        name: "{{ itz_platform.name }}"
        status: Enabled
      policy:
        id: "{{ itz_policy.id }}"
        name: "{{ itz_policy.name }}"
        status: Enabled
      purpose: "{{ itz_purpose }}"
      region: "{{ itz_location.region | default(selected_region.name) }}"
      requestMethod: "{{ selected_region.requestMethod }}"
      start: "{{ start }}"
      template: "{{ selected_region.template }}"
      terms: true
      user: "{{ itz_user.user.userid }}"
    validate_certs: false
  vars:
    selected_region: "{{ itz_platform.regions | selectattr('geo', '==', itz_location.geo) | flatten | first }}"
    now: "{{ '%s' | ansible.builtin.strftime }}"
    start: "{{ '%Y-%m-%dT%H:%M:00.000Z' | ansible.builtin.strftime(second=(now + adjustment_for_utc)) }}"
    end: "{{ '%Y-%m-%dT%H:%M:00.000Z' | ansible.builtin.strftime(second=(now + adjustment_for_utc + itz_policy.defaultLength)) }}"
  register: _result

- name: Set cluster_name fact
  ansible.builtin.set_fact:
    cluster_name: "{{ _result.json.id }}"
